import Feed from "@/components/Feed";
import Header from "@/components/Header";
import SideBar from "@/components/SideBar";
import Head from "next/head";
import { useSession } from "next-auth/react";
import { useRouter } from "next/router";
import Modal from "@/components/Modal";
import { useRecoilState } from "recoil";
import { modalState, modalTypeState } from "@/atoms/modalAtom";
import { AnimatePresence } from "framer-motion";
import { connectToDatabase } from "@/utils/mongodb";
import Widgets from "@/components/Widgets";

export default function Home({ posts, articles }) {
	const router = useRouter();
	const [modalOpen, setModalOpen] = useRecoilState(modalState);
	const [modalType, setModalType] = useRecoilState(modalTypeState);

	const { status } = useSession({
		required: true,
		onUnauthenticated() {
			// The user is not authenticated, handle it here.
			router.push("/home");
		},
	});

	return (
		<div className=" h-screen overflow-y-scroll bg-[#F3F2EF] dark:bg-black">
			<Head>
				<title>LinkedIn App</title>
				<meta
					name="description"
					content="Generated by create next app"
				/>
				<meta
					name="viewport"
					content="width=device-width, initial-scale=1"
				/>
				<link rel="icon" href="/favicon.ico" />
			</Head>

			<Header />

			<main className="mx-auto flex max-w-6xl gap-x-6 pt-24 pl-4 dark:bg-black">
				<SideBar />
				<Feed posts={posts} />

				<Widgets articles={articles} />
				<AnimatePresence>
					{modalOpen && (
						<Modal
							type={modalType}
							handleClose={() => setModalOpen(false)}
						/>
					)}
				</AnimatePresence>
			</main>
		</div>
	);
}

export async function getServerSideProps(context) {
	// get posts on SSR
	const { db } = await connectToDatabase();
	const posts = await db
		.collection("posts")
		.find()
		.sort({ timestamp: -1 })
		.toArray();

	// get articles
	const results = await fetch(
		`https://newsapi.org/v2/top-headlines?country=us&apiKey=${process.env.NEWS_API_KEY}`
	).then((res) => res.json());

	return {
		props: {
			posts: posts.map((post) => ({
				_id: post._id.toString(),
				input: post.input,
				photoUrl: post.photoUrl,
				userName: post.userName,
				email: post.email,
				userImg: post.userImg,
				createdAt: post.createdAt,
			})),
			articles: results.articles,
		},
	};
}
